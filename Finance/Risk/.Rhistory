names(tesla) = "TSLA"
head(tesla)
apple = Delt(AAPL[,6])
names(apple) = "APPLE"
head(apple)
blk = Delt(BLK[,6])
names(blk) = "BLK"
head(blk)
tesla = Delt(TSLA[,6])
names(tesla) = "TSLA"
head(tesla)
retornos = cbind(tesla,blk,apple)
retornos
retornos = cbind(tesla,blk,apple)
head(retornos)
retornos = cbind(tesla,blk,apple)
head(retornos)
retornos[-1,]
head(retornos)
retornos = cbind(tesla,blk,apple)
head(retornos)
retornos = retornos[-1,]
head(retornos)
ret.por = 1 + retornos
head(ret.por)
retor.acum = cumprod(ret.por)
retor.acum = cumprod(ret.por)
head(retor.acum)
retor.acum = cumprod(ret.por)
tail(retor.acum)
nrow(retor.acum)
retor.acum2 = retor.acum[nrow(retor.acum)] − 1)
nrow(retor.acum)
retor.acum2 = retor.acum[nrow(retor.acum)] - 1)
nrow(retor.acum)
retor.acum2 = retor.acum[nrow(retor.acum)] - 1
nrow(retor.acum)
(retor.acum2 = retor.acum[nrow(retor.acum)] - 1)
ret.final = as.numeric(w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
ret.final = as.numeric(w.tesla∗retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
2*2
w.tesla
retor.acum2$TSLA
ret.final = as.numeric (w.tesla ∗ w.blk retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
ret.final = as.numeric (w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
ret.final = w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE
retor.acum2 = as.numeric(retor.acum2)
ret.final = w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE
retor.acum2 = as.numeric(retor.acum2)
retor.acum2
ret.final = w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE
retor.acum2 = as.numeric(retor.acum2)
retor.acum2
ret.final = w.tesla ∗ retor.acum2[1]+ w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE
(ret.final = as.numeric(w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
(ret.final <- as.numeric(w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
(ret.final <- as.numeric(w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
ret.tesla = w.tesla ∗ retor.acum2$TSLA
ret.tesla = w.tesla ∗ as.numeric(retor.acum2$TSLA)
ret.tesla = as.numeric(w.tesla ∗ retor.acum2$TSLA)
ret.tesla = as.numeric(w.tesla ∗ retor.acum2[1])
retorn.acum2 = as.numeric(retorn.acum2)
nrow(retor.acum)
(retor.acum2 = retor.acum[nrow(retor.acum)] - 1)
(ret.final <- as.numeric(w.tesla ∗ retor.acum2$TSLA + w.blk ∗ retor.acum2$BLK + w.apple ∗ retor.acum2$APPLE)
retorn.acum2 = as.numeric(retorn.acum2)
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = as.numeric(w.tesla ∗ retor.acum2[1])
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = w.tesla ∗ retor.acum2[1])
nrow(retor.acum)
(retor.acum2 = retor.acum[nrow(retor.acum)] - 1)
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = w.tesla ∗ retor.acum2[1])
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = w.tesla ∗ retor.acum2[1]
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = (w.tesla ∗ retor.acum2[1])
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = as.numeric(w.tesla ∗ retor.acum2[1])
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = (w.tesla∗retor.acum2[1])
retor.acum2[1]
type(retor.acum2[1])
str(retor.acum2)
retor.acum2 = as.numeric(retor.acum2)
ret.tesla = (w.tesla∗retor.acum2[1])
(ret.final <- as.numeric(w.tesla*retor.acum2$TSLA + w.blk * retor.acum2$BLK + w.apple * retor.acum2$APPLE)
(ret.final <- as.numeric(w.tesla*retor.acum2$TSLA + w.blk * retor.acum2$BLK + w.apple * retor.acum2$APPLE))
nrow(retor.acum)
(retor.acum2 = retor.acum[nrow(retor.acum)] - 1)
(ret.final <- as.numeric(w.tesla*retor.acum2$TSLA + w.blk * retor.acum2$BLK + w.apple * retor.acum2$APPLE))
library("quantmod")
library('dplyr')
getSymbols(c('BLK','AAPL','TSLA'),
src = "yahoo",
from = "2018-01-01",
to = "2022-07-30",
periodicity = "daily")
getSymbols(c('BLK','AAPL','TSLA'),
src = "yahoo",
from = "2018-01-01",
to = "2022-07-30",
periodicity = "daily")
View(BLK)
View(TSLA)
chartSeries(AAPL, TA=NULL)
chartSeries(TSLA, TA=NULL)
chartSeries(BLK, TA=NULL)
apple = Delt(AAPL[,6])
names(apple) = "APPLE"
head(apple)
blk = Delt(BLK[,6])
names(blk) = "BLK"
head(blk)
tesla = Delt(TSLA[,6])
names(tesla) = "TSLA"
head(tesla)
View(apple)
retornos = cbind(tesla,blk,apple)
head(retornos)
retornos = retornos[-1,]
head(retornos)
View(apple)
View(blk)
View(tesla)
View(retornos)
retornos = cbind(tesla,blk,apple)
head(retornos)
retornos = cbind(tesla,blk,apple)
head(retornos)
retornos = retornos[-1,]
head(retornos)
options(scipen = 999) #Evitamos notación cientifica, pero con 0 obtenemos el default
i.tesla = 50000
i.blk = 30000
i.apple = 20000
i.total = i.tesla + i.blk + i.apple
(w.tesla = i.tesla / i.total)
(w.apple = i.apple / i.total)
(w.blk = i.blk / i.total)
ret.por = 1 + retornos
head(ret.por)
retor.acum = cumprod(ret.por)
tail(retor.acum) # Esta es una suma directa periodo a periodo, pero recordemos que puede no ser eficiente, puesto que caidas grandes en un periodo no son compensables con otro periodo.
nrow(retor.acum)
(retor.acum2 = retor.acum[nrow(retor.acum)] - 1)
(ret.final <- as.numeric(w.tesla*retor.acum2$TSLA + w.blk * retor.acum2$BLK + w.apple * retor.acum2$APPLE))
pesos = c(w.apple, w.blk,w. tesla)
pesos = c(w.apple, w.blk, w.tesla)
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz
mat.es = matrix(pesos,1)
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz
(mat.es = matrix(pesos,1))
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz
(mat.es = matrix(pesos,2))
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz
(mat.es = matrix(pesos,1))
?matrix
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz
(mat.es = matrix(pesos,nrow=1)) #1 es el numero de filas
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz de pesos
(mat.pes = matrix(pesos,nrow=1)) #1 es el numero de filas
# Creando la matriz de rendimientos
(mat.ret = matrix(retor.acum2,3))
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz de pesos
(mat.pes = matrix(pesos,nrow=1)) #1 es el numero de filas
# Creando la matriz de rendimientos
(mat.ret = matrix(retor.acum2,ncol=3))
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz de pesos
(mat.pes = matrix(pesos,nrow=1)) #1 es el numero de filas
# Creando la matriz de rendimientos
(mat.ret = matrix(retor.acum2,nrow=3))
View(retor.acum2)
View(retor.acum2)
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz de pesos
(mat.pes = matrix(pesos,nrow=1)) #1 es el numero de filas
# Creando la matriz de rendimientos
(mat.ret = matrix(retor.acum,nrow=3))
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz de pesos
(mat.pes = matrix(pesos,nrow=1)) #1 es el numero de filas
# Creando la matriz de rendimientos
(mat.ret = matrix(retor.acum2,nrow=3))
t(mat.ret)
rpmatrix = mat.ret %*% mat.pes
(rpmatrix = mat.ret %*% mat.pes)
(rpmatrix = mat.pes %*% mat.ret)
fecha = as.Date(c("2018−12−31", "2019−03−31",
"2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
fecha = as.Date(c("2018−12−31", "2019−03−31","2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
fecha = anydate(c("2018−12−31", "2019−03−31","2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
install.packages("any")
install.packages("anytime")
library("quantmod")
library('dplyr')
library("anytime")
fecha = anydate(c("2018−12−31", "2019−03−31","2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000) cbind(data.frame(dates), mv, cf)
fecha = anydate(c("2018−12−31", "2019−03−31","2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000)
cbind(data.frame(dates), mv, cf)
fecha = anydate(c("2018−12−31", "2019−03−31","2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000)
cbind(data.frame(fecha), mv, cf)
fecha = anydate(c("2018−12−31", "2019−03−31","2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000)
fecha
cbind(data.frame(fecha), mv, cf)
fecha = anydate(c("2018/12/31", "2019−03−31","2019−06−30", "2019−07−31",
"2019−09−30", "2019−12−31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000)
fecha
cbind(data.frame(fecha), mv, cf)
fecha = anydate(c("2020/12/31", "2021/03/31","2021/06−30", "2021/07/31",
"2021/09−30", "2021/12−31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000)
fecha
cbind(data.frame(fecha), mv, cf)
fecha = anydate(c("2020/12/31", "2021/03/31","2021/06/30", "2021/07/31",
"2021/09/30", "2021/12/31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000)
fecha
cbind(data.frame(fecha), mv, cf)
hpr = rep(0, length(cf))
for (i in (2 : (length(cf)))) {
hpr[i] = (mv[i] - mv[i-1] + cf[i]) / mv[i - 1]
}
hpr
hpr = rep(0, length(cf))
for (i in (1 : (length(cf)))) {
hpr[i] = (mv[i] - mv[i-1] + cf[i]) / mv[i - 1]
}
hpr = rep(0, length(cf))
for (i in (2 : (length(cf)))) {
hpr[i] = (mv[i] - mv[i-1] + cf[i]) / mv[i - 1]
}
hpr
hpr = rep(0, length(cf))
for (i in (2 : (length(cf)))) {
hpr[i] = (mv[i] - mv[i-1] + cf[i]) / mv[i - 1]
}
cbind(data.frame(fecha), mv, cf,hpr)
hpr2 = 1+hpr
hpr2 = 1+hpr
(cum.ret = cumprod(hpr2))
(hpr2 = 1+hpr)
(cum.ret = cumprod(hpr2))
(hpr2 = 1+hpr)
# Obteniendo el TWRR
(cum.ret = cumprod(hpr2)) # Acumulamos los rendimientos multiplicando
(prod(hpr2))
(hpr2 = 1+hpr)
# Obteniendo el TWRR mediante dos formas
#Forma 1 Acumulando los productos
(cum.ret = cumprod(hpr2)) # Acumulamos los rendimientos multiplicando cada elemento
(cum.ret[length(cf) - 1])
(prod(hpr2))
(hpr2 = 1+hpr)
# Obteniendo el TWRR mediante dos formas
#Forma 1 Acumulando los productos
(cum.ret = cumprod(hpr2)) # Acumulamos los rendimientos multiplicando cada elemento
(cum.ret[length(cf)] -1 ) # Accedemos al ultimo valor y le quitamos 1
# Forma 2 Multiplicando
(prod(hpr2))-1 #Multiplicamos todos los elementos y le restamos 1
pv = function(cf, dates, r){
t = as.numeric((dates - dates[1]) / 365)
pv_factor = (1 + r)^-t
pv = cf * pv_factor
value = sum(pv)
return(value)
}
cf = c(-100000, 120000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
mwrr = function(cf, dates, guess) { delta.x = 0.01
tol = 0.0000001
cur.x =guess
iter = 0
for (i in 1:1000) {
fx = pv(cf, dates, cur.x)
cur.x.delta = cur.x - delta.x
fx.delta = pv(cf, dates, cur.x.delta)
dx = (fx - fx.delta) / delta.x
cur.x = cur.x - (fx/dx)
iter = iter+1
cat("At iteration", iter, "MWRR equals", cur.x, "\n")
if (abs(fx) < tol) break
}
}
cf = c(-100000, 120000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
mwrr = function(cf, dates, guess) {
delta.x = 0.01
tol = 0.0000001
cur.x =guess
iter = 0
for (i in 1:1000) {
fx = pv(cf, dates, cur.x)
cur.x.delta = cur.x - delta.x
fx.delta = pv(cf, dates, cur.x.delta)
dx = (fx - fx.delta) / delta.x
cur.x = cur.x - (fx/dx)
iter = iter+1
cat("At iteration", iter, "MWRR equals", cur.x, "\n")
if (abs(fx) < tol) break
}
}
cf = c(-100000, 120000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
mwrr = function(cf, dates, guess) {
delta.x = 0.01
tol = 0.0000001
cur.x =guess
iter = 0
for (i in 1:1000) {
fx = pv(cf, dates, cur.x)
cur.x.delta = cur.x - delta.x
fx.delta = pv(cf, dates, cur.x.delta)
dx = (fx - fx.delta) / delta.x
cur.x = cur.x - (fx/dx)
iter = iter+1
cat("At iteration", iter, "MWRR equals", cur.x, "\n")
if (abs(fx) < tol) break
}
}
cf = c(-100000, 120000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
mwrr = function(cf, dates, guess) {
delta.x = 0.01
tol = 0.0000001
cur.x =guess
iter = 0
for (i in 1:1000) {
fx = pv(cf, dates, cur.x)
cur.x.delta = cur.x - delta.x
fx.delta = pv(cf, dates, cur.x.delta)
dx = (fx - fx.delta) / delta.x
cur.x = cur.x - (fx/dx)
iter = iter+1
cat("En la iteracíón", iter, "MWRR es igual a", cur.x, "\n")
if (abs(fx) < tol) break
}
}
cf = c(-100000, 120000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
pesos = c(w.apple, w.blk, w.tesla)
# Creando la matriz de pesos
(mat.pes = matrix(pesos,nrow=1)) #1 es el numero de filas
# Creando la matriz de rendimientos
(mat.ret = matrix(retor.acum2,nrow=3)) #Ahora le decimos que divida en tres filas.
fecha = anydate(c("2020/12/31", "2021/03/31","2021/06/30", "2021/07/31",
"2021/09/30", "2021/12/31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 0, -5000)
cbind(data.frame(fecha), mv, cf)
hpr = rep(0, length(cf))
(hpr = rep(0, length(cf)))
(hpr = rep(0, length(mv)))
hpr = rep(0, length(cf))
for (i in (2 : (length(cf)))) {
hpr[i] = (mv[i] - mv[i-1] + cf[i]) / mv[i - 1]
}
cbind(data.frame(fecha), mv, cf,hpr)
mwrr = function(cf, dates, guess) {
delta.x = 0.01
tol = 0.0000001
cur.x =guess
iter = 0
for (i in 1:1000) {
fx = pv(cf, dates, cur.x)
cur.x.delta = cur.x - delta.x
fx.delta = pv(cf, dates, cur.x.delta)
dx = (fx - fx.delta) / delta.x
cur.x = cur.x - (fx/dx)
iter = iter+1
cat("En la iteracíón", iter, "MWRR es igual a", cur.x, "\n") #Funciona como Print
if (abs(fx) < tol) break
}
}
cf = c(-100000, 120000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
cf = c(-100000, 100000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
cf = c(-100000, 104000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
mwrr = function(cf, dates, guess) {
delta.x = 0.01
tol = 0.001
cur.x =guess
iter = 0
for (i in 1:1000) {
fx = pv(cf, dates, cur.x)
cur.x.delta = cur.x - delta.x
fx.delta = pv(cf, dates, cur.x.delta)
dx = (fx - fx.delta) / delta.x
cur.x = cur.x - (fx/dx)
iter = iter+1
cat("En la iteracíón", iter, "MWRR es igual a", cur.x, "\n") #Funciona como Print
if (abs(fx) < tol) break
}
}
cf = c(-100000, 104000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
mwrr = function(cf, dates, guess) {
delta.x = 0.01
tol = 0.00000001
cur.x =guess
iter = 0
for (i in 1:1000) {
fx = pv(cf, dates, cur.x)
cur.x.delta = cur.x - delta.x
fx.delta = pv(cf, dates, cur.x.delta)
dx = (fx - fx.delta) / delta.x
cur.x = cur.x - (fx/dx)
iter = iter+1
cat("En la iteracíón", iter, "MWRR es igual a", cur.x, "\n") #Funciona como Print
if (abs(fx) < tol) break
}
}
cf = c(-100000, 104000)
dates = anydate(c("2018/12/31", "2019/12/31"))
mwrr(cf, dates, 0.1)
knitr::include_graphics("https://github.com/dereckamesquita/DAEC/blob/af433bd1a69d576c52e17e70ca54c62682cb21ef/Finance/daec.jpeg")
knitr::include_graphics("https://raw.githubusercontent.com/dereckamesquita/DAEC/af433bd1a69d576c52e17e70ca54c62682cb21ef/Finance/daec.jpeg")
knitr::include_graphics("daec.jpeg")
View(AAPL)
apple = Delt(AAPL[,6])
names(apple) = "APPLE"
head(apple)
blk = Delt(BLK[,6])
names(blk) = "BLK"
head(blk)
tesla = Delt(TSLA[,6])
names(tesla) = "TSLA"
head(tesla)
View(TSLA)
(ret.final <- as.numeric(w.tesla*retor.acum2$TSLA + w.blk * retor.acum2$BLK + w.apple * retor.acum2$APPLE))
fecha = anydate(c("2020/12/31", "2021/03/31","2021/06/30", "2021/07/31",
"2021/09/30", "2021/12/31"))
mv = c(2000000, 1950000, 2000000, 2220000, 2400000, 2500000)
cf = c(0, 0, 0, 20000, 400, -5000)
cbind(data.frame(fecha), mv, cf)
df <- data.frame (x = c (1, 3, 3, 4, 6, 8, 12, 13, 15, 18, 21, 22), y = c (13, 15, 9, 17, 22, 25, 29, 35, 39, 44, 45, 40))
df
(df$x, df $ y, pch = 19, main = ' Default Axes ')
plot(df$x, df $ y, pch = 19, main = ' Default Axes ')
plot(df$x, df $ y, pch = 19, main = ' Escala por defecto ')
plotplot(df$x, df$y, log = ' y ', pch = 19)
plot(df$x, df$y, log = ' y ', pch = 19)
plot(df$x, log(df$y), pch = 19)
library("quantmod")
library('dplyr')
library("anytime")
library("quantmod")
library('dplyr')
library("anytime")
getSymbols(c('BLK','AAPL','TSLA'),
src = "yahoo",
from = "2018-01-01",
to = "2022-07-30",
periodicity = "daily")
retornos = cbind(tesla,apple)
apple = Delt(AAPL[,6])
names(apple) = "APPLE"
head(apple)
blk = Delt(BLK[,6])
names(blk) = "BLK"
head(blk)
tesla = Delt(TSLA[,6])
names(tesla) = "TSLA"
head(tesla)
retornos = cbind(tesla,apple)
head(retornos)
retornos = retornos[-1,]
head(retornos)
ret.por = 1 + retornos
head(ret.por)
ret.por = 1 + retornos
retor.acum = cumprod(ret.por)
tail(retor.acum) # Esta es una suma de multiplicación directa periodo a periodo
